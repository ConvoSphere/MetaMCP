[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "metamcp"
version = "1.0.0"
description = "Meta-Server for Model Context Protocol (MCP) - A comprehensive tool registry and execution platform for AI agents"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MetaMCP Team", email = "team@metamcp.org"}
]
maintainers = [
    {name = "MetaMCP Team", email = "team@metamcp.org"}
]
keywords = ["mcp", "model-context-protocol", "ai", "agents", "tools", "registry"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "fastmcp>=2.10.4",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "weaviate-client>=4.16.4",
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "opa-python-client>=0.1.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0", # Align OTel versions across stack
    "opentelemetry-exporter-otlp-proto-http>=1.21.0",
    "opentelemetry-exporter-prometheus>=0.56b0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    "click>=8.1.7",
    "opentelemetry-instrumentation",
    "weaviate",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=5.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "black>=24.1.1",
    "isort>=5.13.2",
    "flake8>=7.0.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "bandit>=1.8.6",
    "safety>=3.6.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.5.3",
    "mkdocs-autorefs>=0.4.0",
    "mkdocs-section-index>=0.3.10",
    "httpx>=0.27.0",
    "pytest-httpx>=0.27.0",
    "pytest-env>=1.1.3",
    "ipython>=8.21.0",
    "ipdb>=0.13.13",
    "rich>=13.7.0",
    "click>=8.1.7",
]
monitoring = [
    "prometheus-client>=0.19.0",
    "opentelemetry-api>=1.21.0",
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",  # Align OTel versions across stack
    "opentelemetry-exporter-otlp-proto-http>=1.21.0",
    "opentelemetry-exporter-prometheus>=0.56b0",
]

[project.urls]
Homepage = "https://github.com/lichtbaer/MetaMCP"
Documentation = "https://metamcp.readthedocs.io"
Repository = "https://github.com/lichtbaer/MetaMCP"
"Bug Tracker" = "https://github.com/lichtbaer/MetaMCP/issues"
Changelog = "https://github.com/lichtbaer/MetaMCP/blob/main/CHANGELOG.md"

[project.scripts]
metamcp = "metamcp.main:main"
metamcp-cli = "scripts.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["metamcp*"]

[tool.setuptools.package-data]
metamcp = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = [".venv", "build", "dist"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "fastapi.*",
    "uvicorn.*",
    "sqlalchemy.*",
    "weaviate.*",
    "openai.*",
    "anthropic.*",
    "jose.*",
    "passlib.*",
    "prometheus_client.*",
    "opentelemetry.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance tests",
    "security: marks tests as security tests",
    "benchmark: marks tests as benchmarks",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["metamcp"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.bandit]
exclude_dirs = ["tests", "docs"]
skips = ["B101", "B601"]

[tool.safety]
output = "json" 
