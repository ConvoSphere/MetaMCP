name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scan

env:
  PYTHON_VERSION: '3.11'
  UV_VERSION: '1.0.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: ${{ env.UV_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/uv
        key: lint-${{ runner.os }}-uv-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          lint-${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements-dev.txt

    - name: Run Black (Code Formatting)
      run: |
        source .venv/bin/activate
        black --check --diff metamcp/ tests/

    - name: Run isort (Import Sorting)
      run: |
        source .venv/bin/activate
        isort --check-only --diff metamcp/ tests/

    - name: Run flake8 (Style Guide)
      run: |
        source .venv/bin/activate
        flake8 metamcp/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 metamcp/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run ruff (Fast Linter)
      run: |
        source .venv/bin/activate
        ruff check metamcp/ tests/

    - name: Run mypy (Type Checking)
      run: |
        source .venv/bin/activate
        mypy metamcp/ --ignore-missing-imports

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: ${{ env.UV_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          .venv
          ~/.cache/uv
        key: test-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          test-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Run unit tests
      run: |
        source .venv/bin/activate
        pytest tests/unit/ -v -m "not slow and not performance and not security and not benchmark" --cov=metamcp --cov-report=xml --cov-report=html --cov-branch
      env:
        META_MCP_SECRET_KEY: test-secret-key-for-testing-only
        META_MCP_JWT_SECRET_KEY: test-jwt-secret-key-for-testing-only

    - name: Upload unit test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests,python${{ matrix.python-version }}
        name: unit-tests-py${{ matrix.python-version }}

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: metamcp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Run integration tests
      run: |
        source .venv/bin/activate
        pytest tests/integration/ -v -m "not slow and not performance and not security and not benchmark" --cov=metamcp --cov-report=xml --cov-append
      env:
        META_MCP_SECRET_KEY: test-secret-key-for-testing-only
        META_MCP_JWT_SECRET_KEY: test-jwt-secret-key-for-testing-only
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/metamcp_test
        REDIS_URL: redis://localhost:6379

    - name: Upload integration test coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-tests

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install security tools
      run: |
        pip install bandit[toml] safety semgrep

    - name: Run Bandit security scan
      run: |
        bandit -r metamcp/ -f json -o bandit-report.json
        bandit -r metamcp/ -f txt -o bandit-report.txt
      continue-on-error: true

    - name: Run Safety dependency check
      run: |
        safety check -r requirements.txt --json --output safety-report.json
        safety check -r requirements.txt --output safety-report.txt
      continue-on-error: true

    - name: Run Semgrep SAST
      run: |
        semgrep --config=auto --json --output=semgrep-report.json metamcp/
        semgrep --config=auto --output=semgrep-report.txt metamcp/
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.*
          safety-report.*
          semgrep-report.*

    - name: Security Report Summary
      run: |
        echo "### Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Bandit: $(grep -c '"issue_severity"' bandit-report.json || echo 0) issues found"
        echo "- Safety: $(grep -c '"vulnerability"' safety-report.json || echo 0) vulnerabilities found"
        echo "- Semgrep: $(grep -c '"check_id"' semgrep-report.json || echo 0) findings"

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv
      uses: astral-sh/setup-uv@v1
      with:
        version: ${{ env.UV_VERSION }}

    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate
        uv pip install -r requirements.txt
        uv pip install -r requirements-dev.txt

    - name: Run performance tests
      run: |
        source .venv/bin/activate
        pytest tests/unit/performance/ -v --benchmark-only --benchmark-json=benchmark-results.json
      env:
        META_MCP_SECRET_KEY: test-secret-key-for-testing-only

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark-results.json

  # Build Docker Images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, security]
    if: github.event_name == 'push'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v4
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Generate SBOM (Syft)
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: spdx-json
        output-file: sbom.spdx.json

    - name: Scan image with Trivy
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: 'table'
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true
      continue-on-error: true

    - name: Upload build artifacts (SBOM & scan)
      uses: actions/upload-artifact@v4
      with:
        name: image-security-${{ github.sha }}
        path: |
          sbom.spdx.json

    - name: Cosign sign image (optional)
      if: ${{ secrets.COSIGN_KEY != '' && secrets.COSIGN_PASSWORD != '' }}
      env:
        COSIGN_EXPERIMENTAL: '1'
        COSIGN_KEY: ${{ secrets.COSIGN_KEY }}
      run: |
        echo "${{ secrets.COSIGN_PASSWORD }}" | cosign sign --key env://COSIGN_KEY ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      shell: bash

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.ref == 'refs/heads/develop'
    environment: 
      name: staging
      url: https://staging.metamcp.org
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Image: ${{ needs.build.outputs.image-tags }}"
        echo "Digest: ${{ needs.build.outputs.image-digest }}"
        # Add actual deployment logic here
        # Example: kubectl, helm, or docker-compose commands

    - name: Run smoke tests
      run: |
        echo "🧪 Running smoke tests against staging..."
        # Add smoke test commands here

    - name: Notify deployment status
      run: |
        echo "### 🎯 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: staging.metamcp.org"
        echo "- Image: ${{ needs.build.outputs.image-tags }}"
        echo "- Commit: ${{ github.sha }}"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security, performance]
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://metamcp.org
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "Image: ${{ needs.build.outputs.image-tags }}"
        echo "Digest: ${{ needs.build.outputs.image-digest }}"
        # Add actual production deployment logic here

    - name: Run health checks
      run: |
        echo "🏥 Running production health checks..."
        # Add health check commands here

    - name: Notify deployment status
      run: |
        echo "### 🎉 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: metamcp.org"
        echo "- Image: ${{ needs.build.outputs.image-tags }}"
        echo "- Commit: ${{ github.sha }}"

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      uses: actions/create-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false