version: '3.8'

services:
  # MCP Meta-Server
  metamcp-server:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9000:8000"
    environment:
      # Application Settings
      - APP_NAME=MetaMCP
      - APP_VERSION=1.0.0
      - DEBUG=true
      - ENVIRONMENT=development
      
      # Server Settings
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=1
      
      # Database Settings
      - DATABASE_URL=postgresql://metamcp:metamcp@postgres:5432/metamcp
      - DATABASE_POOL_SIZE=10
      - DATABASE_MAX_OVERFLOW=20
      
      # Vector Database Settings
      - WEAVIATE_URL=http://weaviate:8080
      - WEAVIATE_API_KEY=
      - VECTOR_DIMENSION=1536
      
      # LLM Settings
      - LLM_PROVIDER=openai
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-ada-002}
      
      # Authentication Settings
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # Default Admin Settings (for initial setup only)
      - DEFAULT_ADMIN_USERNAME=${DEFAULT_ADMIN_USERNAME:-}
      - DEFAULT_ADMIN_PASSWORD=${DEFAULT_ADMIN_PASSWORD:-}
      
      # Enhanced Security Settings
      - PASSWORD_MIN_LENGTH=12
      - PASSWORD_REQUIRE_SPECIAL=true
      - SESSION_TIMEOUT_MINUTES=60
      - MAX_LOGIN_ATTEMPTS=5
      - LOCKOUT_DURATION_MINUTES=30
      
      # Security Settings
      - OPA_URL=http://opa:8181
      - OPA_TIMEOUT=5
      
      # Logging Settings
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=json
      
      # Monitoring Settings
      - PROMETHEUS_METRICS_PORT=9090
      
      # OpenTelemetry Settings
      - OTLP_ENDPOINT=
      - OTLP_INSECURE=true
      - TELEMETRY_ENABLED=false
      
      # CORS Settings
      - CORS_ORIGINS=["http://localhost:9501","http://localhost:3000"]
      - CORS_ALLOW_CREDENTIALS=true
      
      # Rate Limiting
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
      
      # Tool Registry Settings
      - TOOL_REGISTRY_ENABLED=true
      - TOOL_REGISTRY_AUTO_DISCOVERY=true
      - TOOL_REGISTRY_CACHE_TTL=300
      
      # Vector Search Settings
      - VECTOR_SEARCH_ENABLED=false
      - VECTOR_SEARCH_SIMILARITY_THRESHOLD=0.7
      - VECTOR_SEARCH_MAX_RESULTS=10
      
      # Policy Settings
      - POLICY_ENFORCEMENT_ENABLED=true
      - POLICY_DEFAULT_ALLOW=false
      
      # Admin Settings
      - ADMIN_ENABLED=true
      - ADMIN_PORT=9501
      
      # Development Settings
      - RELOAD=true
      - DOCS_ENABLED=true
      
      # Redis Settings
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
    depends_on:
      - postgres
      - weaviate
      - redis
      - opa
    volumes:
      - ./logs:/app/logs
      - ./policies:/app/policies
    networks:
      - metamcp-network
    restart: unless-stopped

  # Streamlit Admin Interface
  metamcp-admin:
    env_file:
      - .env
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9501:9501"
    environment:
      # Streamlit Settings
      - STREAMLIT_SERVER_PORT=9501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
      - STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION=false
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
      
      # Admin API Connection
      - ADMIN_API_URL=http://metamcp-server:8000/api/v1/admin/
      
      # Application Settings
      - APP_NAME=MetaMCP Admin
      - ENVIRONMENT=development
    depends_on:
      - metamcp-server
    volumes:
      - ./logs:/app/logs
    networks:
      - metamcp-network
    restart: unless-stopped
    command: ["python", "scripts/start_admin.py"]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: metamcp
      POSTGRES_USER: metamcp
      POSTGRES_PASSWORD: metamcp
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - metamcp-network
    restart: unless-stopped

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    ports:
      - "9088:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'false'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - metamcp-network
    restart: unless-stopped

  # Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - metamcp-network
    restart: unless-stopped

  # Open Policy Agent (OPA)
  opa:
    image: openpolicyagent/opa:0.66.0-envoy
    ports:
      - "8181:8181"
    command:
      - "run"
      - "--server"
      - "--addr=0.0.0.0:8181"
      - "--log-level=info"
      - "/policies"
    volumes:
      - ./policies:/policies
    networks:
      - metamcp-network
    restart: unless-stopped

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.53.1
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - metamcp-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.4.5
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - metamcp-network
    restart: unless-stopped

volumes:
  postgres_data:
  weaviate_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  metamcp-network:
    driver: bridge